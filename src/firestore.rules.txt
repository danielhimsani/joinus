
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'events' collection
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUids[0] == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid in resource.data.ownerUids;
      allow delete: if request.auth != null && request.auth.uid in resource.data.ownerUids;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'eventChats' collection
    match /eventChats/{chatId} {
      // Helper functions for readability
      function isParticipant() {
        return request.auth.uid in resource.data.participants;
      }
      function isOwner() {
        return request.auth.uid in resource.data.ownerUids;
      }
      function isGuest() {
        return request.auth.uid == resource.data.guestUid;
      }

      // Who can read the chat document?
      allow read: if isParticipant();

      // Who can create a chat document? (Typically the guest initiating the request)
      allow create: if request.auth.uid == request.resource.data.guestUid &&
                       request.auth.uid in request.resource.data.participants &&
                       request.resource.data.ownerUids.size() > 0 && // Must have owners
                       request.resource.data.participants.size() == request.resource.data.ownerUids.size() + 1 && // participants = guest + owners
                       request.resource.data.status == 'pending_request' && // Initial status
                       // Required fields check
                       request.resource.data.keys().hasAll([
                         'eventId', 'guestUid', 'ownerUids', 'participants', 'status',
                         'createdAt', 'updatedAt', 'eventInfo', 'guestInfo',
                         'lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId', 'unreadCount'
                       ]) &&
                       // Ensure timestamps are server timestamps if possible, or valid on create
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;


      // Who can update a chat document?
      allow update: if isParticipant() &&
                       // Check for immutable fields that should not change after creation
                       request.resource.data.eventId == resource.data.eventId &&
                       request.resource.data.guestUid == resource.data.guestUid &&
                       request.resource.data.ownerUids == resource.data.ownerUids && // ownerUids list itself is immutable post-creation for this model
                       request.resource.data.participants == resource.data.participants &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       (
                         // Scenario 1: Owner is setting status to 'request_rejected', 'closed', 'request_approved', or 'active'
                         (
                           ( request.resource.data.status == 'request_rejected' ||
                             request.resource.data.status == 'closed' ||
                             request.resource.data.status == 'request_approved' ||
                             request.resource.data.status == 'active'
                           ) &&
                           isOwner() &&
                           // When owners perform these status changes, they primarily update status, updatedAt, and unreadCount.
                           // lastMessage details are typically updated by new messages, not by these status actions.
                           request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'updatedAt', 'unreadCount']) &&
                           !request.resource.data.diff(resource.data).affectedKeys().hasAny(['lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId']) // Ensure these are not changed by owner status update
                         ) ||
                         // Scenario 2: General updates (like last message details, unread counts) by any participant.
                         // Status must NOT be changing to an owner-controlled state by a non-owner.
                         (
                           ( resource.data.status == request.resource.data.status || // Status not changing
                             // Or if status is changing, it's not to a restricted one by a non-owner
                             !( (request.resource.data.status == 'request_rejected' ||
                                 request.resource.data.status == 'closed' ||
                                 request.resource.data.status == 'request_approved' ||
                                 request.resource.data.status == 'active') && !isOwner()
                              )
                           ) &&
                           // Common updatable fields for message sending or read status
                           request.resource.data.diff(resource.data).affectedKeys().hasAny(
                             ['lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId', 'updatedAt', 'unreadCount', 'status']
                           )
                         )
                       ) &&
                       request.resource.data.updatedAt == request.time; // Ensure updatedAt is always updated to server time

      // Rules for 'messages' subcollection
      match /messages/{messageId} {
        // Allow participants of the parent chat to read messages
        allow read: if request.auth.uid in get(/databases/$(database)/documents/eventChats/$(chatId)).data.participants;

        // Allow participants to create messages if senderId matches their UID
        allow create: if request.auth.uid in get(/databases/$(database)/documents/eventChats/$(chatId)).data.participants &&
                         request.resource.data.senderId == request.auth.uid &&
                         request.resource.data.timestamp == request.time && // Message timestamp must be server time
                         request.resource.data.keys().hasAll(['senderId', 'text', 'timestamp', 'senderInfo']); // Required fields

        // Generally, messages are immutable. Disallow updates/deletes for simplicity.
        allow update, delete: if false;
      }
    }
  }
}
