
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for 'events' collection
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUids[0] == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid in resource.data.ownerUids;
      allow delete: if request.auth != null && request.auth.uid in resource.data.ownerUids;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for 'eventChats' collection
    match /eventChats/{chatId} {
      // Helper functions for readability
      function isParticipantInExistingChat() {
        return resource.data != null && resource.data.participants is list && request.auth.uid in resource.data.participants;
      }
      function isOwnerOfExistingChat() { // Checks based on existing document (resource.data)
        return resource.data != null && resource.data.ownerUids is list && request.auth.uid in resource.data.ownerUids;
      }
      function isGuestOfExistingChat() { // Checks based on existing document (resource.data)
        return resource.data != null && request.auth.uid == resource.data.guestUid;
      }

      allow read: if isParticipantInExistingChat();

      // Who can create a chat document? (Typically the guest initiating the request)
      allow create: if request.auth.uid == request.resource.data.guestUid &&
                       request.resource.data.eventId != null &&
                       request.resource.data.ownerUids is list &&
                       request.resource.data.ownerUids.size() > 0 &&
                       request.resource.data.participants is list &&
                       request.resource.data.participants.size() == (request.resource.data.ownerUids.size() + 1) && // Check correct size
                       request.resource.data.guestUid in request.resource.data.participants && // Check guest is in participants
                       // Simplified: Removed complex .all() check for ownerUids in participants for create
                       request.resource.data.status == 'pending_request' &&
                       request.resource.data.keys().hasAll([
                         'eventId', 'guestUid', 'ownerUids', 'participants', 'status',
                         'createdAt', 'updatedAt', 'eventInfo', 'guestInfo',
                         'lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId', 'unreadCount'
                       ]) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastMessageTimestamp == request.time &&
                       request.resource.data.lastMessageSenderId == request.auth.uid &&
                       request.resource.data.unreadCount is map &&
                       request.resource.data.unreadCount.keys().size() == request.resource.data.ownerUids.size(); // Check unreadCount has correct number of keys for owners
                       // Simplified: Removed .all() check for specific values in unreadCount for create

      // Who can update a chat document?
      allow update: if isParticipantInExistingChat() &&
                       // Check for immutable fields that should not change after creation
                       request.resource.data.eventId == resource.data.eventId &&
                       request.resource.data.guestUid == resource.data.guestUid &&
                       request.resource.data.ownerUids == resource.data.ownerUids &&
                       request.resource.data.participants == resource.data.participants &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       request.resource.data.updatedAt == request.time && // updatedAt must be server timestamp
                       (
                         // Scenario 1: Owner changing status (approve, reject, close, active)
                         (
                           ( request.resource.data.status == 'request_rejected' ||
                             request.resource.data.status == 'closed' ||
                             request.resource.data.status == 'request_approved' ||
                             request.resource.data.status == 'active' // 'active' also by owner
                           ) &&
                           isOwnerOfExistingChat() && // Only owner of existing chat can change status
                           // Check that only allowed fields are changed by owner for status updates
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt'])
                         ) ||
                         // Scenario 2: Any participant updating last message details OR their own unread count
                         (
                           ( request.resource.data.status == resource.data.status ) && // Status not changing by non-owner/non-status-change-op
                           (
                             // Updating last message info (done when sending a message)
                             (
                               request.resource.data.diff(resource.data).affectedKeys().hasAny(['lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId', 'unreadCount']) &&
                               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId', 'updatedAt', 'unreadCount']) &&
                               request.resource.data.lastMessageSenderId == request.auth.uid // Sender of last message must be current user
                             ) ||
                             // Updating only one's own unread count (e.g., marking as read)
                             (
                               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['unreadCount.' + request.auth.uid, 'updatedAt']) &&
                               request.resource.data.unreadCount[request.auth.uid] == 0 // Setting own unread to 0
                             )
                           ) &&
                           request.resource.data.unreadCount is map && // Basic check that unreadCount is a map
                           request.resource.data.unreadCount.values().all(ucValue, ucValue is int) && // And its values are integers
                           // Prevent guests/owners from maliciously editing denormalized info of the other party if it's not part of a status change or message send
                           (!isGuestOfExistingChat() || !request.resource.data.diff(resource.data).affectedKeys().hasAny(['eventInfo'])) &&
                           (!isOwnerOfExistingChat() || !request.resource.data.diff(resource.data).affectedKeys().hasAny(['guestInfo']))
                         )
                       );

      // Rules for 'messages' subcollection
      match /messages/{messageId} {
        function isSenderOfNewMessage() {
          return request.auth.uid == request.resource.data.senderId;
        }

        allow read: if exists(/databases/$(database)/documents/eventChats/$(chatId)) &&
                       request.auth.uid in get(/databases/$(database)/documents/eventChats/$(chatId)).data.participants;

        allow create: if isSenderOfNewMessage() &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.chatId == chatId &&
                         request.resource.data.keys().hasAll(['chatId', 'senderId', 'text', 'timestamp', 'senderInfo']) &&
                         (
                           // Scenario 1: First message in a batch with parent chat creation.
                           (
                             !exists(/databases/$(database)/documents/eventChats/$(chatId)) &&
                             // Ensure the parent chat being created is 'pending_request'
                             getAfter(/databases/$(database)/documents/eventChats/$(chatId)).data.status == 'pending_request' &&
                             // And the sender is the guest who is creating the chat
                             request.auth.uid == getAfter(/databases/$(database)/documents/eventChats/$(chatId)).data.guestUid
                           ) ||
                           // Scenario 2: Subsequent messages to an existing, active/approved/pending chat.
                           (
                             exists(/databases/$(database)/documents/eventChats/$(chatId)) &&
                             request.auth.uid in get(/databases/$(database)/documents/eventChats/$(chatId)).data.participants &&
                             (
                               get(/databases/$(database)/documents/eventChats/$(chatId)).data.status == 'active' ||
                               get(/databases/$(database)/documents/eventChats/$(chatId)).data.status == 'request_approved' ||
                               get(/databases/$(database)/documents/eventChats/$(chatId)).data.status == 'pending_request'
                             )
                           )
                         );
        allow update, delete: if false; // Messages are immutable
      } // End of messages/{messageId} match
    } // End of eventChats/{chatId} match
  } // End of databases/{database}/documents match
} // End of service cloud.firestore
    
