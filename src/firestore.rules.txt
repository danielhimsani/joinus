
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'events' collection
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUids[0] == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid in resource.data.ownerUids;
      allow delete: if request.auth != null && request.auth.uid in resource.data.ownerUids;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'eventChats' collection
    match /eventChats/{chatId} {
      // Helper functions for readability
      function isParticipant() {
        return resource.data != null && resource.data.participants != null && request.auth.uid in resource.data.participants;
      }
      function isOwner() {
        return resource.data != null && resource.data.ownerUids != null && request.auth.uid in resource.data.ownerUids;
      }
      function isGuest() {
        return resource.data != null && request.auth.uid == resource.data.guestUid;
      }

      allow read: if isParticipant();

      // Who can create a chat document? (Typically the guest initiating the request)
      allow create: if request.auth.uid == request.resource.data.guestUid &&
                       request.resource.data.eventId != null && // Added check for eventId presence
                       request.auth.uid in request.resource.data.participants &&
                       request.resource.data.ownerUids.size() > 0 &&
                       request.resource.data.participants.size() == request.resource.data.ownerUids.size() + 1 &&
                       request.resource.data.status == 'pending_request' &&
                       request.resource.data.keys().hasAll([
                         'eventId', 'guestUid', 'ownerUids', 'participants', 'status',
                         'createdAt', 'updatedAt', 'eventInfo', 'guestInfo',
                         'lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId', 'unreadCount'
                       ]) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastMessageTimestamp == request.time &&
                       request.resource.data.lastMessageSenderId == request.auth.uid && // Ensure initial message sender is the guest
                       // Validate unreadCount structure: keys must be exactly the ownerUids, and all values must be 1
                       request.resource.data.unreadCount.keys().size() == request.resource.data.ownerUids.size() &&
                       request.resource.data.unreadCount.keys().hasAll(request.resource.data.ownerUids) &&
                       request.resource.data.ownerUids.all(uid, request.resource.data.unreadCount[uid] == 1);


      // Who can update a chat document?
      allow update: if isParticipant() &&
                       // Check for immutable fields that should not change after creation
                       request.resource.data.eventId == resource.data.eventId &&
                       request.resource.data.guestUid == resource.data.guestUid &&
                       request.resource.data.ownerUids == resource.data.ownerUids &&
                       request.resource.data.participants == resource.data.participants &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       (
                         // Scenario 1: Owner is setting status to 'request_rejected', 'closed', 'request_approved', or 'active'
                         (
                           ( request.resource.data.status == 'request_rejected' ||
                             request.resource.data.status == 'closed' ||
                             request.resource.data.status == 'request_approved' ||
                             request.resource.data.status == 'active'
                           ) &&
                           isOwner() && // Only owner can make these status changes
                           // When owners perform these status changes, they primarily update status, updatedAt, and unreadCount.
                           // Allow eventInfo and guestInfo to be part of this if needed, though typically static.
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'unreadCount', 'eventInfo', 'guestInfo', 'lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId'])
                         ) ||
                         // Scenario 2: General updates (like last message details, unread counts) by any participant.
                         // Status must NOT be changing to an owner-controlled state by a non-owner.
                         (
                           ( resource.data.status == request.resource.data.status || // Status not changing
                             // Or if status is changing, it's not to a restricted one by a non-owner
                             !( (request.resource.data.status == 'request_rejected' ||
                                 request.resource.data.status == 'closed' ||
                                 request.resource.data.status == 'request_approved' ||
                                 request.resource.data.status == 'active') && !isOwner()
                              )
                           ) &&
                           // Common updatable fields for message sending or read status
                           request.resource.data.diff(resource.data).affectedKeys().hasAny(
                             ['lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId', 'updatedAt', 'unreadCount', 'status']
                           ) &&
                           // Ensure non-owners are not changing fields they shouldn't if we add more complex fields
                           (!isGuest() || !request.resource.data.diff(resource.data).affectedKeys().hasAny(['eventInfo'])) &&
                           (!isOwner() || !request.resource.data.diff(resource.data).affectedKeys().hasAny(['guestInfo']))
                         )
                       ) &&
                       request.resource.data.updatedAt == request.time; // Ensure updatedAt is always updated to server time

      // Rules for 'messages' subcollection
      match /messages/{messageId} {
        function isSender() {
          return request.auth.uid == request.resource.data.senderId;
        }

        allow read: if request.auth.uid in get(/databases/$(database)/documents/eventChats/$(chatId)).data.participants;

        allow create: if isSender() &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.chatId == chatId && // Ensure message is for this chat
                         request.resource.data.keys().hasAll(['chatId', 'senderId', 'text', 'timestamp', 'senderInfo']);
                         // To ensure the user is a participant of the parent chat:
                         // This is implicitly handled because the UI would only allow message creation for chats the user is part of.
                         // For stricter backend enforcement during batch writes (like the first message):
                         // The parent 'eventChats/{chatId}' create rule is the main gatekeeper for the first message.
                         // For subsequent messages, client-side logic usually gates this, but if you wanted to be
                         // extremely strict here, you could add `&& request.auth.uid in get(/databases/$(database)/documents/eventChats/$(chatId)).data.participants`
                         // but this adds a read cost to every message write. Typically, UI + parent chat rules are sufficient.

        allow update, delete: if false;
      }
    }
  }
}
