
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'events' collection
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUids[0] == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid in resource.data.ownerUids;
      allow delete: if request.auth != null && request.auth.uid in resource.data.ownerUids;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'eventChats' collection
    match /eventChats/{chatId} {
      // Helper functions for readability
      function isParticipant() {
        return resource.data != null && resource.data.participants != null && request.auth.uid in resource.data.participants;
      }
      function isOwner() {
        return resource.data != null && resource.data.ownerUids != null && request.auth.uid in resource.data.ownerUids;
      }
      function isGuest() {
        return resource.data != null && request.auth.uid == resource.data.guestUid;
      }

      allow read: if isParticipant();

      // Who can create a chat document? (Typically the guest initiating the request)
      allow create: if request.auth.uid == request.resource.data.guestUid &&
                       request.resource.data.eventId != null &&
                       request.auth.uid in request.resource.data.participants &&
                       request.resource.data.ownerUids is list &&
                       request.resource.data.ownerUids.size() > 0 &&
                       request.resource.data.participants is list &&
                       request.resource.data.participants.size() == request.resource.data.ownerUids.size() + 1 &&
                       request.resource.data.status == 'pending_request' &&
                       request.resource.data.keys().hasAll([
                         'eventId', 'guestUid', 'ownerUids', 'participants', 'status',
                         'createdAt', 'updatedAt', 'eventInfo', 'guestInfo',
                         'lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId', 'unreadCount'
                       ]) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastMessageTimestamp == request.time &&
                       request.resource.data.lastMessageSenderId == request.auth.uid &&
                       // Validate unreadCount structure
                       request.resource.data.unreadCount is map &&
                       request.resource.data.unreadCount.keys().size() == request.resource.data.ownerUids.size() &&
                       // Ensure all ownerUids in unreadCount map to the integer 1, and no other keys exist.
                       (request.resource.data.ownerUids.size() == 0 || // handles case of no owners, though previous rule checks size > 0
                        request.resource.data.ownerUids.all(uid,
                           uid is string && request.resource.data.unreadCount.get(uid, 0) == 1
                        )
                       );


      // Who can update a chat document?
      allow update: if isParticipant() &&
                       // Check for immutable fields that should not change after creation
                       request.resource.data.eventId == resource.data.eventId &&
                       request.resource.data.guestUid == resource.data.guestUid &&
                       request.resource.data.ownerUids == resource.data.ownerUids &&
                       request.resource.data.participants == resource.data.participants &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       (
                         // Scenario 1: Owner changing status (approve, reject, close, active)
                         (
                           ( request.resource.data.status == 'request_rejected' ||
                             request.resource.data.status == 'closed' ||
                             request.resource.data.status == 'request_approved' ||
                             request.resource.data.status == 'active'
                           ) &&
                           isOwner() &&
                           // Owners can also update unreadCount (e.g., if they send a system message implicitly, or to reset their own)
                           // And general last message details if they are the ones sending a system message or final message.
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'unreadCount', 'lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId'])
                         ) ||
                         // Scenario 2: Any participant updating last message details and their own unread count (or other's on send)
                         (
                           ( request.resource.data.status == resource.data.status ) && // Status not changing by non-owner
                           request.resource.data.diff(resource.data).affectedKeys().hasAny(
                             ['lastMessageText', 'lastMessageTimestamp', 'lastMessageSenderId', 'updatedAt', 'unreadCount']
                           ) &&
                           // Ensure unreadCount update is valid:
                           // User can set their own unread count to 0.
                           ( request.resource.data.unreadCount[request.auth.uid] == 0 ||
                             // Or, for other participants, count can be incremented by 1 (when user sends a message).
                             resource.data.participants.filter(p => p != request.auth.uid).all(
                                 p, request.resource.data.unreadCount[p] == (resource.data.unreadCount[p] + 1) ||
                                    request.resource.data.unreadCount[p] == resource.data.unreadCount[p] // no change
                             )
                           ) &&
                           // Ensure other fields are not touched unexpectedly by guests when updating these
                           (!isGuest() || !request.resource.data.diff(resource.data).affectedKeys().hasAny(['eventInfo'])) &&
                           (!isOwner() || !request.resource.data.diff(resource.data).affectedKeys().hasAny(['guestInfo']))
                         )
                       ) &&
                       request.resource.data.updatedAt == request.time;

      // Rules for 'messages' subcollection
      match /messages/{messageId} {
        function isSender() {
          return request.auth.uid == request.resource.data.senderId;
        }

        allow read: if exists(/databases/$(database)/documents/eventChats/$(chatId)) &&
                       request.auth.uid in get(/databases/$(database)/documents/eventChats/$(chatId)).data.participants;

        allow create: if isSender() &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.chatId == chatId &&
                         request.resource.data.keys().hasAll(['chatId', 'senderId', 'text', 'timestamp', 'senderInfo']) &&
                         (
                           // Scenario 1: First message in a batch with parent chat creation.
                           // Parent chat document does not exist *before* this write.
                           // We rely on the parent's create rule to validate the sender (guest) and initial status.
                           !exists(/databases/$(database)/documents/eventChats/$(chatId)) ||
                           // Scenario 2: Subsequent messages to an existing, active/pending chat.
                           (
                             exists(/databases/$(database)/documents/eventChats/$(chatId)) &&
                             request.auth.uid in get(/databases/$(database)/documents/eventChats/$(chatId)).data.participants &&
                             (
                               get(/databases/$(database)/documents/eventChats/$(chatId)).data.status == 'active' ||
                               get(/databases/$(database)/documents/eventChats/$(chatId)).data.status == 'request_approved' ||
                               get(/databases/$(database)/documents/eventChats/$(chatId)).data.status == 'pending_request'
                             )
                           )
                         );

        allow update, delete: if false;
      }
    }
  }
}
