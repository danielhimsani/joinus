
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for 'events' collection
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUids[0] == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid in resource.data.ownerUids;
      allow delete: if request.auth != null && request.auth.uid in resource.data.ownerUids;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for 'eventChats' collection
    // DIAGNOSTIC: EXTREMELY INSECURE - FOR TESTING ONLY
    match /eventChats/{chatId} {
      allow read, write: if true; // Allows all operations

      // Rules for 'messages' subcollection
      // DIAGNOSTIC: EXTREMELY INSECURE - FOR TESTING ONLY
      match /messages/{messageId} {
        allow read, write: if true; // Allows all operations
      }
    }

    // Rules for 'eventAnnouncements' collection
    match /eventAnnouncements/{announcementId} {
      // Helper: Check if the user is an owner of the event linked to this announcement
      function isEventOwnerForAnnouncement(eventId) {
        return exists(/databases/$(database)/documents/events/$(eventId)) &&
               request.auth.uid in get(/databases/$(database)/documents/events/$(eventId)).data.ownerUids;
      }

      // Allow read if authenticated (for simplicity, can be tightened later)
      allow read: if request.auth != null; 

      allow create: if isEventOwnerForAnnouncement(request.resource.data.eventId) && // Must be owner of the target event
                       request.resource.data.ownerUid == request.auth.uid && // Creator must be self
                       request.resource.data.messageText is string && request.resource.data.messageText.size() > 0 &&
                       request.resource.data.timestamp == request.time; // Server timestamp

      allow update, delete: if false; // Announcements are immutable
    }

  } // End of databases/{database}/documents match
} // End of service cloud.firestore
    
